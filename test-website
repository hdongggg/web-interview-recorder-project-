<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Ghi H√¨nh v√† T·∫£i Xu·ªëng</title>
    <!-- T·∫£i Tailwind CSS t·ª´ CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Thi·∫øt l·∫≠p font Inter cho giao di·ªán */
        body { font-family: 'Inter', sans-serif; }

        /* ƒê·∫£m b·∫£o khung video hi·ªÉn th·ªã ƒë√∫ng k√≠ch th∆∞·ªõc v√† t·ª∑ l·ªá */
        #liveVideo, #playbackVideo {
            width: 100%;
            max-width: 640px;
            height: auto;
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        /* Hi·ªáu ·ª©ng cho n√∫t t∆∞∆°ng t√°c */
        .button-style {
            transition: all 0.2s;
            box-shadow: 0 4px #4b5563; /* shadow-md */
        }
        .button-style:active {
            box-shadow: 0 1px #4b5563;
            transform: translateY(3px);
        }
        .disabled-style {
            opacity: 0.5;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800 min-h-screen p-4 flex items-start justify-center">
    <div class="w-full max-w-4xl bg-white p-6 md:p-10 mt-8 rounded-3xl shadow-xl space-y-8 border border-gray-100">
        <header class="text-center space-y-2">
            <h1 class="text-3xl md:text-4xl font-extrabold text-gray-900">·ª®ng D·ª•ng Ghi H√¨nh Tr·ª±c Tuy·∫øn</h1>
            <p class="text-gray-500">S·ª≠ d·ª•ng `getUserMedia` v√† `MediaRecorder` ƒë·ªÉ ghi l·∫°i video.</p>
        </header>

        <!-- Khu v·ª±c hi·ªÉn th·ªã Video Tr·ª±c Ti·∫øp -->
        <div class="flex flex-col items-center space-y-4">
            <h2 class="text-xl font-semibold text-gray-700">Camera Tr·ª±c Ti·∫øp:</h2>
            <video id="liveVideo" autoplay muted class="bg-gray-200 border-4 border-gray-300"></video>
            <div id="statusMessage" class="text-lg text-blue-600 font-medium h-6">S·∫µn s√†ng...</div>
        </div>

        <!-- Khu v·ª±c ƒêi·ªÅu Khi·ªÉn -->
        <div class="flex flex-wrap justify-center gap-4 pt-4">
            <button id="startCameraButton" onclick="startCamera()" 
                    class="button-style bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:ring-4 focus:ring-blue-500 w-full sm:w-auto">
                <span class="mr-2">üì∏</span> B·∫≠t Camera
            </button>

            <button id="startRecordingButton" onclick="startRecording()" disabled
                    class="button-style bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:ring-4 focus:ring-red-500 disabled:disabled-style w-full sm:w-auto">
                <span class="mr-2">üî¥</span> B·∫Øt ƒê·∫ßu Ghi
            </button>

            <button id="stopRecordingButton" onclick="stopRecording()" disabled
                    class="button-style bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:ring-4 focus:ring-yellow-500 disabled:disabled-style w-full sm:w-auto">
                <span class="mr-2">‚èπÔ∏è</span> D·ª´ng Ghi
            </button>
            
            <button id="downloadButton" onclick="downloadVideo()" disabled
                    class="button-style bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:ring-4 focus:ring-green-500 disabled:disabled-style w-full sm:w-auto">
                <span class="mr-2">üì•</span> T·∫£i Xu·ªëng Video
            </button>
        </div>

        <!-- Khu v·ª±c hi·ªÉn th·ªã Video ƒê√£ Ghi -->
        <div id="playbackContainer" class="flex flex-col items-center space-y-4 pt-8 hidden">
            <h2 class="text-xl font-semibold text-gray-700">Video ƒê√£ Ghi:</h2>
            <video id="playbackVideo" controls class="bg-gray-200 border-4 border-gray-300"></video>
            <p class="text-sm text-gray-500">Video n√†y c√≥ th·ªÉ xem l·∫°i ho·∫∑c t·∫£i xu·ªëng b·∫±ng n√∫t "T·∫£i Xu·ªëng Video" ph√≠a tr√™n.</p>
        </div>

    </div>

    <script>
        let mediaStream = null;
        let mediaRecorder = null;
        let recordedChunks = [];
        let recordedBlob = null;

        const liveVideo = document.getElementById('liveVideo');
        const playbackVideo = document.getElementById('playbackVideo');
        const playbackContainer = document.getElementById('playbackContainer');
        const statusMessage = document.getElementById('statusMessage');

        const startCamBtn = document.getElementById('startCameraButton');
        const startRecBtn = document.getElementById('startRecordingButton');
        const stopRecBtn = document.getElementById('stopRecordingButton');
        const downloadBtn = document.getElementById('downloadButton');

        function updateUI(cameraOn, recording) {
            startCamBtn.disabled = cameraOn;
            startRecBtn.disabled = !cameraOn || recording;
            stopRecBtn.disabled = !recording;
            downloadBtn.disabled = !recordedBlob;
        }

        updateUI(false, false);

        async function startCamera() {
            statusMessage.textContent = 'ƒêang y√™u c·∫ßu truy c·∫≠p camera...';
            
            recordedBlob = null;
            playbackContainer.classList.add('hidden');
            playbackVideo.src = '';
            
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
            }

            try {
                mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                
                liveVideo.srcObject = mediaStream;
                liveVideo.play();

                statusMessage.textContent = 'Camera ƒë√£ s·∫µn s√†ng. Nh·∫•n "B·∫Øt ƒê·∫ßu Ghi" ƒë·ªÉ quay.';
                updateUI(true, false);

            } catch (error) {
                console.error('L·ªói khi truy c·∫≠p media:', error);
                if (error.name === 'NotAllowedError') {
                    statusMessage.textContent = 'L·ªói: B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera v√† microphone.';
                } else if (error.name === 'NotFoundError') {
                    statusMessage.textContent = 'L·ªói: Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã camera ho·∫∑c microphone.';
                } else {
                    statusMessage.textContent = `L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`;
                }
                updateUI(false, false);
            }
        }

        function startRecording() {
            if (!mediaStream) {
                statusMessage.textContent = 'L·ªói: Vui l√≤ng b·∫≠t camera tr∆∞·ªõc.';
                return;
            }

            recordedChunks = [];
            recordedBlob = null;
            playbackContainer.classList.add('hidden');

            try {
                // Th·ª≠ nghi·ªám v·ªõi 'video/webm; codecs=vp9' ƒë·ªÉ c√≥ ch·∫•t l∆∞·ª£ng t·ªët v√† t∆∞∆°ng th√≠ch r·ªông
                let options = { mimeType: 'video/webm; codecs=vp9' };
                if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                    options = { mimeType: 'video/webm' };
                    if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                        statusMessage.textContent = 'L·ªói: Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ghi h√¨nh WebM.';
                        return;
                    }
                }
                
                mediaRecorder = new MediaRecorder(mediaStream, options);

                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    recordedBlob = new Blob(recordedChunks, { type: mediaRecorder.mimeType.split(';')[0] });
                    
                    const videoURL = URL.createObjectURL(recordedBlob);
                    
                    playbackVideo.src = videoURL;
                    playbackContainer.classList.remove('hidden');
                    
                    statusMessage.textContent = 'ƒê√£ d·ª´ng ghi. Video ƒë√£ s·∫µn s√†ng ƒë·ªÉ xem l·∫°i v√† t·∫£i xu·ªëng.';
                    updateUI(true, false);
                };

                mediaRecorder.start();
                statusMessage.textContent = 'ƒêang GHI H√åNH... (Nh·∫•n "D·ª´ng Ghi" khi ho√†n t·∫•t)';
                updateUI(true, true);

            } catch (error) {
                console.error('L·ªói khi t·∫°o MediaRecorder:', error);
                statusMessage.textContent = `L·ªói: Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ghi h√¨nh. (${error.message})`;
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
            }
        }

        function downloadVideo() {
            if (!recordedBlob) {
                statusMessage.textContent = 'Kh√¥ng c√≥ video ƒë·ªÉ t·∫£i xu·ªëng. Vui l√≤ng ghi h√¨nh tr∆∞·ªõc.';
                return;
            }

            const a = document.createElement('a');
            const videoURL = URL.createObjectURL(recordedBlob);
            
            a.href = videoURL;
            a.download = `video_ghi_hinh_${new Date().toISOString().slice(0, 10)}.webm`;
            
            document.body.appendChild(a);
            a.click();
            
            document.body.removeChild(a);
            URL.revokeObjectURL(videoURL);
            
            statusMessage.textContent = 'Video ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!';
        }
    </script>
</body>
</html>
